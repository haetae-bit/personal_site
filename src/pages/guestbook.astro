---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import Layout from "@/layouts/Layout.astro";
import ThemeSwitch from "~/ThemeSwitch.astro";
import speech from "$/images/speech.png";

type GuestBookEntry = {
  ID: number;
  CreatedAt: string;
  UpdatedAt: string;
  DeletedAt: null | string;
  Name: string;
  Text: string;
  Website: null | string;
  Approved: true;
  GuestBookID: number;
  Guestbook: object;
};

dayjs.extend(utc);
const response = await fetch("https://guestbooks.meadow.cafe/api/v1/get-guestbook-messages/500");
const data: GuestBookEntry[] = await response.json();
data.sort((a, b) => new Date(b.CreatedAt).valueOf() - new Date(a.CreatedAt).valueOf());
---
<Layout title="haetae, guestbook">
  <ThemeSwitch />

  <main>
    <h1>Guestbook</h1>

    <section id="form">
      <form action="https://guestbooks.meadow.cafe/guestbook/500/submit" method="post" aria-describedby="errors">
        <label for="name">Nickname</label>
        <input type="text" id="name" name="name" required />

        <label for="website">Website (optional)</label>
        <input type="url" id="website" name="website" />

        <label for="challengeQuestionAnswer">What's my name?</label>
        <input placeholder="read my about page!" type="text" id="challengeQuestionAnswer" name="challengeQuestionAnswer" required />
        
        <label for="text">Message</label>
        <textarea placeholder="Message (plain text only)..." id="text" name="text" required></textarea>
        
        <button type="submit">Submit</button>
      </form>
      <div id="errors" role="alert"></div>

      <aside>
        Lovingly made with <a href="https://guestbooks.meadow.cafe" target="_blank" referrerpolicy="no-referrer">Guestbooks</a>
      </aside>
    </section>
    
    <hr />

    <section id="entries" x-data="guestbook">
      <h2>Messages</h2>
      <template x-for="entry in entries">
        <article class="entry">
          <header>
            <h1>
              <template x-if="entry.Website">
                <a :href="entry.Website" target="_blank" referrerpolicy="no-referrer"><span x-text="entry.Name"></a>
              </template>
              <template x-if="!entry.Website">
                <span x-text="entry.Name"></span>
              </template>
            </h1>
            <time 
              :datetime="formatDate(entry.CreatedAt, true)"
              x-text="formatDate(entry.CreatedAt)"
            >
            </time>
          </header>

          <div x-text="entry.Text"></div>
        </article>
      </template>

      <!-- show this if guestbook entries can't be found -->
      <template x-if="errors">
        <div class="entry error">
          <h1>Uh oh!</h1>
          <span x-text="errors"></span>
        </div>
      </template>
      
      <!-- show the below if javascript isn't available -->
      <noscript>
        {data.map(entry => (
          <article class="entry">
            <header>
              <h1>
                {entry.Website
                  ? <a href={entry.Website} target="_blank" referrerpolicy="no-referrer">{entry.Name}</a>
                  : <span>{entry.Name}</span>
                }
              </h1>
              <time datetime={dayjs(entry.CreatedAt).utc(true).toISOString()}>
                {dayjs(entry.CreatedAt).utc(true).format("MMMM DD, YYYY")}
              </time>
            </header>

            {entry.Text}
          </article>
        ))}
      </noscript>
    </section>

    <button onclick="document.getElementById('notification').showModal()">open popup</button>
    <dialog id="notification">
      <form method="dialog">
        <menu>
          <button type="submit" aria-label="Close">
            <span>x</span>
          </button>
        </menu>
        Successfully posted! Messages are manually approved. New entries should show up in a day or two! :)
      </form>
    </dialog>
  </main>
</Layout>

<style define:vars={{ border: `url(${speech.src})` }}>
  :root {
    --speech-bg-color: #f8f8f8;
    --speech-fg-color: #404040;
  }

  main {
    max-width: clamp(75ch, 80ch, 100%);
    margin: 1rem auto;

    article {
      max-width: calc(80ch + 2rem);
      padding: 1rem;
    }

    @media screen and (width < 1000px) {
      max-width: 100%;
      margin: 1rem;

      article {
        max-width: 100%;
        padding: 0.5rem;
      }
    }
  }

  #form {
    form {
      display: flex;
      flex-flow: column wrap;
      
      input, textarea {
        margin-bottom: 1rem;
        padding: 2px 6px;
      }
    }

    aside {
      color: color-mix(in oklab, var(--fg-color) 80%, var(--bg-color));
    }
  }

  .entry {
    image-rendering: pixelated;
    font-family: var(--sans-font);
    font-size: calc(1rem * 2);
    letter-spacing: 1px;
    color: var(--speech-fg-color);
    background-color: var(--speech-bg-color);
    border-image: var(--border) 7 / 7px / 7px repeat;
    margin: 2rem 0;

    &.error {
      max-width: max-content;
      padding: 1rem;
      margin: 0 auto;
      text-align: center;
    }
  }

  #notification {
    margin: auto;
    max-width: 35ch;
    color: var(--fg-color);
    background: var(--bg-color);
    transition:
      display 1s allow-discrete,
      overlay 1s allow-discrete;
    animation: fadeOut 1s forwards;
    
    menu {
      position: absolute;
      top: 0;
      right: 0;
      width: calc(100% - 4px);
      display: flex;
      justify-content: end;
      padding: 2px;
      margin: 2px 2px 0;
      background-color: color-mix(in oklab, var(--bg-color) 95%, var(--fg-color));
      border: 2px solid var(--fg-color);
      line-height: 1;

      button {
        padding: 0;
        box-shadow: none;
        line-height: 1;
        transform: none;
        display: grid;
        place-content: center;
        width: 44px;
        height: 44px;

        span { transform: translateY(-2px); }

        &:focus {
          border: 4px inset var(--secondary-color);
          outline: 2px solid var(--fg-color);
          box-shadow: none;

          span { transform: translateY(0); }
        }
      }
    }

    form {
      margin-top: calc(44px + 2px);
    }

    &[open] {
      animation: fadeIn 1.0s forwards;
    }
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
  }
</style>

<script>
  import dayjs from "dayjs";
  import utc from "dayjs/plugin/utc";
  dayjs.extend(utc);

  const form = document.forms[0];
  const challenge = form.elements["challengeQuestionAnswer" as any];
  const errors = document.getElementById("errors")!;
  const notification = document.getElementById("notification")! as HTMLDialogElement;

  form.addEventListener("submit", async e => {
    e.preventDefault();
    let data = new FormData(form);
    const response = await fetch(form.action, {
      method: "POST",
      body: data,
    });
    if (response.ok) {
      form.reset();
      notification.showModal();
      errors.innerHTML = "";
    } else {
      const err = await response.text();
      if (response.status === 401) {
        challenge.ariaInvalid = "true";
        errors.innerHTML = "The provided answer to the challenge question was invalid!";
      } else {
        errors.innerHTML = err;
      }
    }
  });

  // fetching entries
  window.Alpine.data("guestbook", () => ({
    entries: [] as any[],
    errors: "",
    async init() {
      try {
        const response = await fetch("https://guestbooks.meadow.cafe/api/v1/get-guestbook-messages/500");
        const data = await response.json();
        data.sort((a: any, b: any) => new Date(b.CreatedAt).valueOf() - new Date(a.CreatedAt).valueOf());
        this.entries = data;
      } catch (error) {
        console.error(error);
        this.errors = "Whoops, couldn't load any guestbook entries! :(";
      }
    },
    formatDate(date: string, iso = false) {
      if (iso) {
        return dayjs(date).utc(true).toISOString();
      } else {
        return dayjs(date).utc(true).format("MMMM DD, YYYY");
      }
    },
  }));
</script>
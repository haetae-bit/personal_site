---
import { actions, isInputError } from "astro:actions";
import { Font } from "astro:assets";

import Layout from "@/layouts/Layout.astro";
import speech from "$/speech.png";
import Entries from "~/Entries.astro";

const result = Astro.getActionResult(actions.guestbook.addEntry);
const inputErrors = isInputError(result?.error) ? result.error.fields : {};
---
<Layout title="haetae, guestbook">
  <Fragment slot="head">
    <Font cssVariable="--mono" preload />
    <Font cssVariable="--mlss" preload />
  </Fragment>

  <main>
    <h1>Guestbook</h1>

    <section id="add-comment">
      <form action={actions.guestbook.addEntry} method="post">
        <label for="username">Nickname</label>
        <input type="text" id="username" name="username" required aria-describedby="username-error" />
        {inputErrors.username && <p id="username-error" class="error">{inputErrors.username}</p>}

        <label for="website">Website (optional)</label>
        <input type="url" id="website" name="website" aria-describedby="website-error" />
        {inputErrors.website && <p id="website-error" class="error">{inputErrors.website}</p>}

        <!-- <label for="challengeQuestionAnswer">What's my name?</label>
        <input placeholder="read my about page!" type="text" id="challengeQuestionAnswer" name="challengeQuestionAnswer" required /> -->
        
        <label for="message">Message</label>
        <textarea placeholder="Message (plain text only)..." id="message" name="message" required aria-describedby="message-error"></textarea>
        {inputErrors.message && <p id="message-error" class="error">{inputErrors.message}</p>}
        
        <button type="submit">Submit</button>
      </form>
    </section>

    <Entries server:defer>
      <p slot="fallback">Loading...</p>
    </Entries>
    
    <dialog id="notification">
      <form method="dialog">
        <menu>
          <button type="submit" aria-label="Close">
            <span>x</span>
          </button>
        </menu>
        Successfully posted! Refreshing in <span id="seconds">5</span> seconds.
      </form>
    </dialog>

    <footer>
      hi
    </footer>
  </main>
</Layout>

<style define:vars={{ border: `url(${speech.src})` }}>
  :root {
    --speech-bg-color: #f8f8f8;
    --speech-fg-color: #404040;
  }
  
  main {
    max-width: clamp(75ch, 80ch, 100%);
    margin: 1rem auto;

    @media screen and (width < 1000px) {
      max-width: 100%;
      margin: 1rem;
    }
  }

  #add-comment {
    form {
      display: flex;
      flex-flow: column wrap;
      
      input, textarea {
        margin-bottom: 1rem;
        padding: 2px 6px;
      }
    }

    .error {
      color: color-mix(in oklab, var(--fg-color) 80%, var(--bg-color));
    }
  }

  #notification {
    margin: auto;
    max-width: 35ch;
    color: var(--fg-color);
    background: var(--bg-color);
    transition:
      display 1s allow-discrete,
      overlay 1s allow-discrete;
    animation: fadeOut 1s forwards;
    
    menu {
      position: absolute;
      top: 0;
      right: 0;
      width: calc(100% - 4px);
      display: flex;
      justify-content: end;
      padding: 2px;
      margin: 2px 2px 0;
      background-color: color-mix(in oklab, var(--bg-color) 95%, var(--fg-color));
      border: 2px solid var(--fg-color);
      line-height: 1;

      button {
        padding: 0;
        box-shadow: none;
        line-height: 1;
        transform: none;
        display: grid;
        place-content: center;
        width: 44px;
        height: 44px;

        span { transform: translateY(-2px); }

        &:focus {
          border: 4px inset var(--secondary-color);
          outline: 2px solid var(--fg-color);
          box-shadow: none;

          span { transform: translateY(0); }
        }
      }
    }

    form {
      margin-top: calc(44px + 2px);
    }

    &[open] {
      animation: fadeIn 1.0s forwards;
    }
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
  }
</style>

<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";
  
  const form = document.forms[0];
  const notification = document.getElementById("notification")! as HTMLDialogElement;
  const seconds = document.getElementById("seconds") as HTMLElement;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const data = new FormData(form);
    const { error } = await actions.guestbook.addEntry(data);
    let time = 5;

    if (!error) {
      notification.showModal();
      const timer = setInterval(() => {
        if (time <= 0) {
          clearInterval(timer);
          notification.close();
          navigate("#entries");
        } else {
          seconds.innerText = time.toString();
          time--;
        }
      }, 1000);
    }
  });
</script>